{"version":3,"sources":["ListItemField.js","ListItem.js","ButtonBar.js","MyList.js","App.js","reportWebVitals.js","index.js"],"names":["ListItemField","props","type","className","field","onChange","event","onListItemFieldChanged","id","target","value","ListItem","classes","selected","push","join","onClick","e","onRowClick","currentTarget","class","checked","completed","ButtonBar","isSelected","setShowCompletedItems","name","MyList","useState","setNewItem","selectedId","setSelectedId","showCompletedItems","isNotEmpty","setIsNotEmpty","input","useRef","listItemFilterMap","All","Uncompleted","listItem","Completed","buttonList","Object","keys","map","tasks","list","filter","a","ref","placeholder","newItem","current","generateUniqueID","onItemAdded","onDeleteListItem","onDeleteAll","App","initialList","data","setData","item","console","log","listItemId","filteredList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAQeA,MARf,SAAuBC,GACnB,OAAO,uBAAOC,KAAM,OAChBC,UAAWF,EAAMG,MACjBC,SACI,SAAAC,GAAK,OAAEL,EAAMM,uBAAuBN,EAAMO,GAAIP,EAAMG,MAAOE,EAAMG,OAAOC,QAE5EA,MAAOT,EAAMA,EAAMG,UCgCZO,MAjCf,SAAkBV,GACd,IAAMW,EAAU,CAAC,aAMjB,OAJIX,EAAMY,UACND,EAAQE,KAAK,YAIb,qBAAKX,UAAWS,EAAQG,KAAK,KAExBP,GAAIP,EAAMO,GACVQ,QAAS,SAACC,GACNhB,EAAMiB,WAAWD,EAAEE,cAAcX,KAJ1C,SAOI,sBAAKY,MAAO,aAAZ,UACI,uBACIlB,KAAK,WACLG,SAAU,SAACY,GACPhB,EAAMM,uBAAuBN,EAAMO,GAAI,YAAaS,EAAER,OAAOY,UAIjEb,GAAIP,EAAMO,GACVa,QAASpB,EAAMqB,YAEvB,cAAC,EAAD,aAAelB,MAAM,QAAWH,QAjB1BA,EAAMO,K,qBCATe,MAbf,SAAmBtB,GACf,OACA,yBACIC,KAAK,SACLC,UAAWF,EAAMuB,WAAa,YAAc,cAC5CR,QAAS,kBAAMf,EAAMwB,sBAAsBxB,EAAMyB,OAHrD,UAKI,sBAAMvB,UAAU,kBAAhB,sBACA,+BAAQF,EAAMyB,WCqFPC,MAxFf,SAAgB1B,GACZ,MAA8B2B,mBAAS,CAACF,KAAM,GAAIlB,GAAI,EAAGc,WAAW,IAApE,mBAAgBO,GAAhB,WACA,EAAoCD,mBAAS,MAA7C,mBAAOE,EAAP,KAAmBC,EAAnB,KACA,EAAoDH,mBAAS,OAA7D,mBAAOI,EAAP,KAA2BP,EAA3B,KACA,EAAoCG,oBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAAkDN,oBAAS,GAA3D,mBAEMO,GAFN,UAEcC,iBAAO,OAWfC,EAAoB,CACtBC,IAAK,kBAAM,GACXC,YAAa,SAAAC,GAAQ,OAAKA,EAASlB,WACnCmB,UAAW,SAAAD,GAAQ,OAAIA,EAASlB,YAI9BoB,EADsBC,OAAOC,KAAKP,GACDQ,KAAI,SAAAnB,GAAI,OAC3C,cAAC,EAAD,CACIA,KAAMA,EACN,eAAczB,EAAMuB,WACpBA,WAAYE,IAASM,EACrBP,sBAAuBA,OAKzBqB,EADe7C,EAAM8C,KAAKC,OAAOX,EAAkBL,IAEpDa,KAAI,SAAAI,GAAC,OACF,cAAC,EAAD,aACI/B,WAAY,SAACV,GAAD,OACRuB,EAAcvB,IAClBD,uBAAwBN,EAAMM,uBAC9BM,SAAUoC,EAAEzC,KAAOsB,GAGfmB,GADCA,EAAEzC,OAQnB,OACI,gCACI,2CACCkC,EACD,uBACA,uBAAOxC,KAAK,OAAOgD,IAAKf,EAAO3B,GAAG,UAC3BH,SAAU,SAACY,GAAD,OAAOiB,EATV,KASmCjB,EAAER,OAAOC,QACnDyC,YAAY,iBAClBlB,GAAc,qBAAKb,MAAM,UAAX,SACX,wBAAQlB,KAAK,SAASwB,KAAK,MAAMV,QAnD7C,WACI,IAAMoC,EAAU,CAAC1B,KAAMS,EAAMkB,QAAQ3C,MAAOF,GAAI8C,cAAoBhC,WAAW,GAC/EO,EAAWuB,GACXnD,EAAMsD,YAAYH,GAClBjB,EAAMkB,QAAQ3C,MAAQ,GACtBwB,GAAc,IA8CN,wBAICJ,GAAc,qBAAKV,MAAM,aAAX,SACX,wBAAQlB,KAAK,SAASwB,KAAK,SAASlB,GAAG,SAASQ,QAC5C,WACIf,EAAMuD,iBAAiB1B,GACvBC,EAAc,OAHtB,2BASR,uBACA,oCAAOe,EAAP,OACA,uBACC,qBAAK1B,MAAM,kBAAX,SACG,wBAAQlB,KAAK,SAASc,QAClB,WACIf,EAAMwD,YAAY3B,IAF1B,8CC5CD4B,MAnCf,SAAazD,GACT,MAAwB2B,mBAAS3B,EAAM0D,aAAvC,mBAAOC,EAAP,KAAaC,EAAb,KAyBA,OAAO,8BACH,cAAC,EAAD,CAAQd,KAAMa,EACNL,YArBZ,SAAyBO,GACrBC,QAAQC,IAAI,OAASF,GAErBD,EAAQ,GAAD,mBAAKD,GAAL,CAAWE,MAmBVN,iBA1BZ,SAA8BS,GAC1BJ,EAAQD,EAAKZ,QAAO,SAAAR,GAAQ,OAAIA,EAAShC,KAAMyD,OA0BvC1D,uBAZZ,SAAoC0D,EAAY7D,EAAOM,GACnDmD,EAAQD,EAAKf,KACT,SAAAL,GAAQ,OAAIA,EAAShC,KAAMyD,EACrBzB,EADM,2BAEFA,GAFE,kBAESpC,EAAQM,SASzB+C,YAlBZ,WACI,IAAIS,EAAeN,EAAKZ,QAAO,SAAAR,GAAQ,OAAKA,EAASlB,aACrDuC,EAAQK,SCRDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCEdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,CAAKnB,YALU,OAOhBoB,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.aac1d7ed.chunk.js","sourcesContent":["function ListItemField(props) {\n    return <input type={\"text\"}\n        className={props.field}\n        onChange={\n            event=>props.onListItemFieldChanged(props.id, props.field, event.target.value)\n        }\n        value={props[props.field]} />\n}\nexport default ListItemField;\n","import './ListItem.css';\nimport './MyList.js'\n\nimport ListItemField from './ListItemField.js'\nimport React, {useState, useRef} from 'react';\nfunction ListItem(props) {\n    const classes = [\"listItem \"];\n\n    if (props.selected) {\n        classes.push(\"selected\");\n    }\n\n    return (\n        <div className={classes.join(\" \")}\n             key={props.id}\n             id={props.id}\n             onClick={(e) => {\n                 props.onRowClick(e.currentTarget.id);\n             }}\n        >\n            <div class= \"container2\">\n                <input\n                    type=\"checkbox\"\n                    onChange={(e) => {\n                        props.onListItemFieldChanged(props.id, \"completed\", e.target.checked);\n                    }\n                    }\n\n                    id={props.id}\n                    checked={props.completed}\n                />\n            <ListItemField field=\"name\" {...props}/>\n            </div>\n\n        </div>\n    )\n}\n\nexport default ListItem;","import \"./ButtonBar.css\"\nfunction ButtonBar(props){\n    return(\n    <button\n        type=\"button\"\n        className={props.isSelected ? \"selected1\" : \"unselected1\"}\n        onClick={() => props.setShowCompletedItems(props.name)}\n    >\n        <span className=\"visually-hidden\">Show&nbsp;</span>\n        <span>{ props.name }</span>\n    </button>\n    )\n}\n\nexport default ButtonBar;","import ListItem from \"./ListItem.js\";\nimport './MyList.css';\nimport React, {useState, useRef} from 'react';\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport ButtonBar from \"./ButtonBar.js\";\n\nfunction MyList(props) {\n    const [newItem, setNewItem] = useState({name: \"\", id: 0, completed: false});\n    const [selectedId, setSelectedId] = useState(null);\n    const [showCompletedItems, setShowCompletedItems] = useState(\"All\");\n    const [isNotEmpty, setIsNotEmpty] = useState(false);\n    const [containsCompleted, setContainsCompleted] = useState(false);\n\n    const input = useRef(null);\n\n    function handleAdd() {\n        const newItem = {name: input.current.value, id: generateUniqueID(), completed: false}\n        setNewItem(newItem);\n        props.onItemAdded(newItem);\n        input.current.value = \"\";\n        setIsNotEmpty(false);\n\n    }\n\n    const listItemFilterMap = {\n        All: () => true,\n        Uncompleted: listItem => !listItem.completed,\n        Completed: listItem => listItem.completed\n    }\n\n    const listItemFilterNames = Object.keys(listItemFilterMap);\n    const buttonList = listItemFilterNames.map(name => (\n        <ButtonBar\n            name={name}\n            aria-pressed={props.isSelected}\n            isSelected={name === showCompletedItems}\n            setShowCompletedItems={setShowCompletedItems}/>\n    ))\n\n\n    const filteredList = props.list.filter(listItemFilterMap[showCompletedItems]);\n    const tasks = filteredList\n        .map(a =>\n            <ListItem\n                onRowClick={(id) =>\n                    setSelectedId(id)}\n                onListItemFieldChanged={props.onListItemFieldChanged}\n                selected={a.id === selectedId}\n\n                key={a.id}\n                {...a} />,\n            );\n\n    const checkInput = (value) => {\n        return (value !== \"\");\n    }\n\n    return (\n        <div>\n            <h2> My List </h2>\n            {buttonList}\n            <br/>\n            <input type=\"text\" ref={input} id=\"myInput\"\n                   onChange={(e) => setIsNotEmpty(checkInput(e.target.value))}\n                   placeholder=\"I need to...\"/>\n            {isNotEmpty && <div class=\"addTask\">\n                <button type=\"button\" name=\"add\" onClick={handleAdd}>Add Task</button>\n            </div>\n            }\n\n                {selectedId && <div class=\"deleteTask\">\n                    <button type=\"button\" name=\"delete\" id=\"delete\" onClick={\n                        () => {\n                            props.onDeleteListItem(selectedId);\n                            setSelectedId(null);\n                        }}>Delete Task\n                    </button>\n                </div>\n                }\n\n            <br/>\n            <div> {tasks} </div>\n            <br/>\n            {<div class=\"deleteAllButton\">\n                <button type=\"button\" onClick={\n                    () => {\n                        props.onDeleteAll(selectedId);\n                    }}>\n                    Delete All Completed Tasks\n                </button>\n            </div>}\n        </div>);\n}\n\nexport default MyList;","import './App.css';\nimport MyList from './MyList';\nimport React from \"react\";\nimport { useState } from 'react';\nimport './ListItem.js'\nfunction App(props) {\n    const [data, setData] = useState(props.initialList);\n\n    function handleDeleteListItem(listItemId){\n        setData(data.filter(listItem => listItem.id !==listItemId))\n    }\n\n    function handleItemAdded(item) {\n        console.log(\"item\" + item)\n\n        setData([...data, item]);\n    }\n\n    function handleDeleteAll() {\n        let filteredList = data.filter(listItem => !listItem.completed);\n        setData(filteredList);\n    }\n\n    function handleListItemFieldChanged(listItemId, field, value) {\n        setData(data.map(\n            listItem => listItem.id !==listItemId\n                ? listItem\n                : {...listItem, [field]: value},\n        ))\n    };\n\n    return <div>\n        <MyList list={data}\n                onItemAdded={handleItemAdded}\n                onDeleteListItem={handleDeleteListItem}\n                onListItemFieldChanged={handleListItemFieldChanged}\n                onDeleteAll={handleDeleteAll}\n        /></div>;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nconst initialData = [];\n\n\nReactDOM.render(\n    <React.StrictMode>\n     <App initialList={initialData}/>\n     </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}