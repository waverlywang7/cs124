{"version":3,"sources":["logo.svg","ListItemField.js","ListItem.js","ButtonBar.js","MyList.js","App.js","reportWebVitals.js","index.js"],"names":["ListItemField","props","type","className","field","onChange","event","onListItemFieldChanged","id","target","value","ListItem","classes","selected","push","join","onClick","e","onRowClick","currentTarget","class","checked","name","defaultChecked","ButtonBar","setShowCompletedItems","MyList","useState","completed","setNewItem","selectedId","setSelectedId","showCompletedItems","input","useRef","listItemFilterMap","All","Uncompleted","listItem","Completed","buttonList","Object","keys","map","isPressed","console","log","list","tasks","filter","a","onToggleCompletedItems","toggleCompletedItems","filteredList","ref","placeholder","current","newItem","generateUniqueID","onItemAdded","onDeleteListItem","onDeleteAll","App","initialList","data","setData","item","listItemId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ecee542.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","function ListItemField(props) {\n    return <input type={\"text\"}\n        className={props.field}\n        onChange={\n            event=>props.onListItemFieldChanged(props.id, props.field, event.target.value)\n        }\n        value={props[props.field]} />\n}\nexport default ListItemField;\n","import './ListItem.css';\nimport './MyList.js'\nimport handleChecked from \"./MyList.js\";\n\nimport ListItemField from './ListItemField.js'\n\nfunction ListItem(props) {\n    // console.log(props.completed);\n    const classes = [\"listItem \"];\n    // const checked = [\"listItemChecked \"]\n    if (props.selected) {\n        classes.push(\"selected\");\n    }\n    // console.log(\"selected \" + props.selected);\n    // console.log(\"completed \" + props.completed);\n    // console.log(\"props outside handlechecked\" + props)\n\n    // function handleChecked(props){\n    //     // const updatedList = this.state.checkedboxes.map(checkedbox => {\n    //     //     if (checkedbox.id === id) {\n    //     //         checkedbox.completed = !checkedbox.completed;\n    //     //     }\n    //     //     return checkedbox;\n    //     // });\n    //     // console.log(\"inside handleChecked \" + props.selected);\n    //     // console.log(\"inside handlechecked \" + props.completed);\n    //     //if (props.completed){\n    //     let current = !props.completed;\n    //\n    //     console.log(\"current \" + current);\n    //     checked.push(current.toString());\n    //     //}\n    //     console.log(\"checked array \" + checked);\n    //     //props.completed = !props.completed;\n    //     // setData(data.map(\n    //     //     listItem => listItem.completed == completed\n    //     //         ? false\n    //     //         : true,\n    //     // ))\n    // }\n\n    return (\n        <div className={classes.join(\" \")}\n             key={props.id}\n             id={props.id}\n             onClick={(e) => {\n                 props.onRowClick(e.currentTarget.id);\n             }}\n        >\n            <div class= \"container2\">\n            <input\n                type=\"checkbox\"\n                onChange={(e) => props.onListItemFieldChanged(props.id, \"completed\", e.target.checked )}\n                id={props.id}\n                name=\" listitem0\"\n                defaultChecked={false}\n                value=\"test\"/>\n\n            <ListItemField field=\"name\" {...props}/>\n\n            </div>\n        </div>\n    )\n}\n\nexport default ListItem;","\nfunction ButtonBar(props){\n    return(\n        // <button type=\"button\" onClick={props.onToggleCompletedItems}> Show Completed Tasks </button>\n    <button\n        type=\"button\"\n        onClick={() => props.setShowCompletedItems(props.name)}\n    >\n        <span className=\"visually-hidden\">Show&nbsp;</span>\n        <span>{ props.name }</span>\n        <span className=\"visually-hidden\">&nbsp;Tasks</span>\n    </button>\n    )\n}\n\nexport default ButtonBar;","import ListItem from \"./ListItem.js\";\nimport React, {useState, useRef} from 'react';\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport ButtonBar from \"./ButtonBar.js\";\nimport setData from \"./App.js\";\nfunction MyList(props) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const [newItem, setNewItem] = useState({name: \"\", id: 0, completed: false});\n    const [selectedId, setSelectedId] = useState(null);\n    const [showCompletedItems, setShowCompletedItems] = useState(\"All\");\n   // const [deleteAll, setDeleteAll] = useState(true);\n\n    const input = useRef(null);\n\n    function handleAdd() {\n        console.log(\"INPUT value \" + input.current.value);\n        const newItem= {name:input.current.value, id:generateUniqueID(), completed:false}\n        // var input = document.getElementById(\"myInput\").value;\n        setNewItem(newItem);\n        props.onItemAdded(newItem);\n        input.current.value = \"\";\n        // data.push(input.current.value);\n        // console.log(data);\n    }\n\n    function deleteAll(){\n        props.onDeleteAll();\n    }\n\n    const listItemFilterMap = {\n        All: () => true,\n        Uncompleted: listItem => !listItem.completed,\n        Completed: listItem => listItem.completed\n    }\n\n    const listItemFilterNames = Object.keys(listItemFilterMap);\n    const buttonList = listItemFilterNames.map(name => (\n        <ButtonBar\n                   name={name}\n                   aria-pressed={props.isPressed}\n                   isPressed={name === showCompletedItems}\n                   setShowCompletedItems={setShowCompletedItems}/>\n    ))\n\n    console.log(props)\n    console.log(props.list)\n\n    const tasks = props.list\n        .filter(listItemFilterMap[showCompletedItems])\n        .map(a=>\n            <ListItem\n                onToggleCompletedItems={toggleCompletedItems}\n                onRowClick={(id) =>\n                    setSelectedId(id)}\n                onListItemFieldChanged={props.onListItemFieldChanged}\n                selected={a.id === selectedId}\n                key={a.id}\n                name={a.name}\n                completed={a.completed} //needed?\n                {...a} />)\n\n    function toggleCompletedItems(){\n        // filter out completed items using setShowCompleted\n        // display filtered list\n        console.log(\"tasks \", props.list);\n        let filteredList = props.list.filter(listItem => listItem.completed);\n        console.log(\"filtered list \", filteredList);\n        setShowCompletedItems(showCompletedItems);\n        return filteredList;\n    }\n\n    return (\n\n        <div>\n            <h2> My List </h2>\n            {buttonList}\n            {/*<ButtonBar onToggleCompletedItems={() => setShowCompletedItems(!showCompletedItems)}> </ButtonBar>*/}\n            {/*<ButtonBar onToggleCompletedItems={() => setShowCompletedItems(showCompletedItems)}> </ButtonBar>*/}\n            {/*<button type=\"button\" onClick={toggleCompletedItems}> Show Completed Tasks </button>*/}\n            <br />\n            <input type=\"text\" ref={input} id=\"myInput\" placeholder=\"I need to...\"/>\n            <div class=\"container\">\n\n                <button onClick={handleAdd}>Add</button>\n                {selectedId && <div class=\"container3\"> <button type=\"button\" name= \"delete\" id= \"delete\" onClick={\n                    () => {\n\n                        props.onDeleteListItem(selectedId);\n                        setSelectedId(null);\n                    }}>\n                    Delete Task\n                </button>\n\n                </div>\n                }\n            </div><br />\n            <div> {tasks} </div>\n            <div className=\"deleteAllButton\">\n                <button onClick={deleteAll}>Delete All Completed Tasks</button>\n            </div>\n            </div>);\n            }\nexport default MyList;","import logo from './logo.svg';\nimport './App.css';\nimport MyList from './MyList';\nimport React from \"react\";\nimport { useState } from 'react';\nimport './ListItem.js'\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\n\nfunction App(props) {\n    const [data, setData] = useState(props.initialList);\n\n    function handleDeleteListItem(listItemId){\n        setData(data.filter(listItem => listItem.id !==listItemId))\n    }\n\n\n\n    function handleItemAdded(item) {\n        console.log(\"item\" + item)\n\n        setData([...data, item]);\n    }\n\n    function handleDeleteAll() {\n        let filteredList = data.filter(listItem => !listItem.completed);\n        setData(filteredList);\n    }\n\n    function handleListItemFieldChanged(listItemId, field, value) {\n        setData(data.map(\n            listItem => listItem.id !==listItemId\n                ? listItem\n                : {...listItem, [field]: value},\n        ))\n    };\n\n    function displayFilteredList() {\n\n    }\n    return <div>\n        <MyList list={data}\n                onItemAdded={handleItemAdded}\n                onDeleteListItem={handleDeleteListItem}\n                onListItemFieldChanged={handleListItemFieldChanged}\n                onDeleteAll={handleDeleteAll}\n                //onToggleCompletedItems={toggleCompletedItems}\n        /></div>;\n};\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nconst initialData = [];\n\n// function InMemoryApp(props) {\n//      return <App data={props.initialData}/>\n// }\nReactDOM.render(\n    <React.StrictMode>\n     <App initialList={initialData}/>\n     </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}