{"version":3,"sources":["ListItemField.js","ListItem.js","ButtonBar.js","MyList.js","MyLists.js","App.js","reportWebVitals.js","index.js"],"names":["ListItemField","props","type","className","field","onChange","event","onListItemFieldChanged","listId","id","target","value","ListItem","classes","checkifSelected","level","priority","selected","push","join","onClick","e","onRowClick","currentTarget","class","name","checked","completed","ButtonBar","isSelected","setShowCompletedItems","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","collectionOfLists","firestore","collection","MyList","useState","setNewItem","selectedId","setSelectedId","showCompletedItems","input","pInput","sortField","sortDirection","order","setOrder","setSortSelected","inputNotEmpty","setInputNotEmpty","useCollection","doc","orderBy","directionString","setDirectionString","data","handleSort","direction","handleDeleteListItem","listItemId","delete","undefined","docs","map","listItemFilterMap","All","Uncompleted","listItem","Completed","buttonList","Object","keys","tasks","filter","a","checkIfOneSelected","length","onListDeleted","returnHome","role","alt","ref","checkInput","placeholder","newItem","current","generateUniqueID","onItemAdded","console","log","completedItems","i","handleDeleteAll","MyLists","listName","setListName","listInput","useRef","loading","listOfButtons","list","setListIdAndName","newList","onListAdded","App","selectedListId","setSelectedListId","currentListName","setCurrentListName","find","element","item","newPriority","creationDate","database","ServerValue","TIMESTAMP","set","update","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","initialList","document","getElementById"],"mappings":"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","file":"static/js/main.6be251d5.chunk.js","sourcesContent":["function ListItemField(props) {\n    return <input type={\"text\"}\n        className={props.field}\n        onChange={\n            event=>props.onListItemFieldChanged(props.listId, props.id, props.field, event.target.value)\n        }\n        value={props[props.field]} />\n}\nexport default ListItemField;\n","import './ListItem.css';\nimport './MyList.js'\nimport ListItemField from './ListItemField.js'\nimport React, {useState, useRef} from 'react';\n\nfunction ListItem(props) {\n    const classes = [\"listItem \"];\n    if (props.selected) {\n        classes.push(\"selected\");\n    }\n\n    function checkifSelected(level) {\n        return level === props.priority;\n    }\n\n    return (\n        <div className={classes.join(\" \")}\n             key={props.id}\n             id={props.id}\n             onClick={(e) => {\n                 props.onRowClick(e.currentTarget.id);\n             }}\n        >\n            <div class=\"container2\">\n                <input\n                    className=\"listiteminput\"\n                    type=\"checkbox\"\n                    aria-label= {'You have selected ' + props.name}\n                    onChange={(e) => {\n                        props.onListItemFieldChanged(props.listId, props.id, \"completed\", e.target.checked);\n                    }\n                    }\n                    id={props.id}\n                    checked={props.completed}\n                />\n               <div className=\"listitemfield\"> <ListItemField field=\"name\" {...props}/></div>\n                <div className=\"itemDropdown\"\n                     aria-label= {'priority. You are on the priority dropdown for ' + props.name + ' You can choose low, medium or high priority'}>\n                    <select name=\"Priority\"\n                            id=\"priorityInput\"\n                            onChange={(e) => {\n                                props.onListItemFieldChanged(props.listId, props.id, \"priority\", e.target.value);\n                            }}>\n                        <option value=\"c\" id=\"low\" selected={checkifSelected(\"c\")}>low</option>\n\n                        <option value=\"b\" id=\"medium\" selected={checkifSelected(\"b\")}>medium</option>\n\n                        <option value=\"a\" id=\"high\" selected={checkifSelected(\"a\")}>high</option>\n                    </select>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ListItem;","import \"./ButtonBar.css\"\nfunction ButtonBar(props){\n    return(\n    <button\n        type=\"button\"\n        className={props.isSelected ? \"selected1\" : \"unselected1\"}\n        onClick={() => props.setShowCompletedItems(props.name)}\n    >\n        <span className=\"visually-hidden\"></span>\n        <span>{ props.name }</span>\n    </button>\n    )\n}\n\nexport default ButtonBar;","import ListItem from \"./ListItem.js\";\nimport './MyList.css';\nimport React, {useState, useRef} from 'react';\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport ButtonBar from \"./ButtonBar.js\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\nimport firebase from \"firebase/compat\";\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCd9qqxvMpEKpBzwfWcc2tlRFa6ICaLH_s\",\n    authDomain: \"hmc-cs124-fa21-labs.firebaseapp.com\",\n    projectId: \"hmc-cs124-fa21-labs\",\n    storageBucket: \"hmc-cs124-fa21-labs.appspot.com\",\n    messagingSenderId: \"949410042946\",\n    appId: \"1:949410042946:web:0113b139a7e3cd1cc709db\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\n\n\nconst collectionName = \"waverlywang7-listitems\";\nconst collectionOfLists = db.collection(collectionName);\n\nfunction MyList(props) {\n    const [newItem, setNewItem] = useState({name: \"\", id: 0, completed: false});\n    const [selectedId, setSelectedId] = useState(null);\n    const [showCompletedItems, setShowCompletedItems] = useState(\"All\");\n    const input = useState(null);\n    const pInput = useState(null);\n    const [order, setOrder] = useState({sortField: \"name\", sortDirection: \"asc\"});\n    const [sortSelected, setSortSelected] = useState(false);\n    const [inputNotEmpty, setInputNotEmpty] = useState(false);\n    const [value, loading, error] = useCollection(collectionOfLists.doc(props.listId).collection(\"tasks\").orderBy(order.sortField, order.sortDirection));\n    const [directionString, setDirectionString] = useState(\"Descending\");\n    let data = [];\n    if (value !== undefined) {\n        data = value.docs.map(doc =>\n            doc.data());\n    }\n\n    function handleSort(name, direction) {\n        setOrder({sortField: name, sortDirection: direction});\n        setSortSelected(true);\n    }\n\n    // uses database to handle deleting an item\n    function handleDeleteListItem(listId, listItemId) {\n        collectionOfLists.doc(listId).collection(\"tasks\").doc(listItemId).delete();\n    }\n\n    function handleDeleteAll() {\n        console.log(\"data\", data);\n        const completedItems = data.filter(listItem => listItem.completed);\n\n        console.log(\"completedItems\", completedItems);\n        for (let i = 0; i < completedItems.length; i++) {\n            handleDeleteListItem(props.listId, completedItems[i].id);\n        }\n    }\n\n    function handleAdd() {\n        const newItem = {\n            name: input.current.value,\n            id: generateUniqueID(),\n            completed: false,\n            priority: pInput.current.value\n        }\n        setNewItem(newItem);\n        props.onItemAdded(newItem.name, newItem.priority, props.listId);\n        input.current.value = \"\";\n        setInputNotEmpty(false);\n    }\n\n    const listItemFilterMap = {\n        All: () => true,\n        Uncompleted: listItem => !listItem.completed,\n        Completed: listItem => listItem.completed\n    }\n\n    const listItemFilterNames = Object.keys(listItemFilterMap);\n    const buttonList = listItemFilterNames.map(name => (\n        <ButtonBar\n            name={name}\n            aria-pressed={props.isSelected}\n            isSelected={name === showCompletedItems}\n            setShowCompletedItems={setShowCompletedItems}/>\n    ))\n\n    const filteredList = data.filter(listItemFilterMap[showCompletedItems]);\n\n    const tasks = filteredList\n        .map(a =>\n            <ListItem\n                listId={props.listId}\n                onRowClick={(id) =>\n                    setSelectedId(id)}\n                onListItemFieldChanged={props.onListItemFieldChanged}\n                selected={a.id === selectedId}\n\n                key={a.id}\n                {...a} />,\n        );\n\n    const checkInput = (value) => {\n        return (value !== \"\");\n    }\n\n    function checkIfContainsCompleted() {\n        const completedItems = data.filter(listItem => listItem.completed);\n        return completedItems.length > 0;\n    }\n\n    function checkIfOneSelected() {\n        const completedItems = data.filter(listItem => listItem.completed);\n        return completedItems.length === 1;\n    }\n\n    function toggleDropdown() {\n        document.getElementById(\"sortButton1\").classList.toggle(\"hideButton\");\n        document.getElementById(\"sortButton2\").classList.toggle(\"hideButton\");\n        document.getElementById(\"sortButton3\").classList.toggle(\"hideButton\");\n    }\n\n    function toggleOrderDropdown() {\n        document.getElementById(\"ascending\").classList.toggle(\"hideButton\");\n        document.getElementById(\"descending\").classList.toggle(\"hideButton\");\n    }\n\n\n    function toggle0rder(){\n        if (order.sortDirection === \"asc\"){\n            setOrder({sortField: order.sortField, sortDirection: \"desc\"});\n            setDirectionString(\"Descending\");\n        } else {\n            setOrder({sortField: order.sortField, sortDirection: \"asc\"});\n            setDirectionString(\"Ascending\");\n        }\n    }\n\n    return (\n\n        <div class=\"myList\">\n            <div className=\"topRowButtons\">\n                <button type=\"button\" name=\"delete\" id=\"deleteList\" onClick={() => props.onListDeleted(props.listId)}\n                >Delete List\n                </button>\n                <button type=\"button\" name=\"Home\" id=\"home\" onClick={props.returnHome}> Return Home</button>\n            </div>\n            <div role=\"group\" alt=\"poopy\"></div>\n            <h2 id =\"h2\" role=\"heading\" aria-level= \"1\" aria-label={props.name}> {props.name} </h2>\n\n            {buttonList}\n            <div class=\"inputbar\">\n                <input type=\"text\" ref={input} id=\"myInput\"\n                       onChange={(e) => setInputNotEmpty(checkInput(e.target.value))}\n                       placeholder=\"I need to...\"/>\n\n                {inputNotEmpty && <div id=\"prioritycontainer\">\n                    <text id=\"priorityText\"> Priority</text>\n                    <div className=\"dropdown\"\n                         aria-label = {' You are on the priority dropdown. You can choose low, medium or high' }>\n\n                        <select name=\"Priority\" ref={pInput} id=\"priorityInput\">\n                            <option value=\"c\">low</option>\n                            <option value=\"b\">medium</option>\n                            <option value=\"a\">high</option>\n                        </select>\n                    </div>\n                </div>\n                }\n\n\n                {inputNotEmpty && <div class=\"addTask\">\n                    <button type=\"button\" name=\"add\" id=\"add\" onClick={handleAdd}\n                    >Add Task\n                    </button>\n                </div>\n                }\n            </div>\n\n            <div className=\"sortRadio\">\n                <label class = \"radio-inline\">\n                <input type=\"radio\" id=\"html\" name=\"fav_language\" value=\"HTML\" onClick={() => handleSort(\"priority\", \"asc\")}/>Sort By Priority</label>\n                <label className=\"radio-inline\">\n                <input type=\"radio\" id=\"css\" name=\"fav_language\" value=\"CSS\" onClick={() => {handleSort(\"name\", \"asc\")}}/>Sort By Name</label>\n                    <label className=\"radio-inline\">\n                        <input type=\"radio\" id=\"javascript\" name=\"fav_language\" value=\"JavaScript\" onClick={() => {handleSort(\"creationDate\", \"asc\")}}/>Sort By Creation Date</label>\n            </div>\n\n            <button class= \"direction\" onClick ={toggle0rder} id=\"order\" aria-label={'Press this to Order by'+ directionString + 'You can toggle between ascending and descending'}>{directionString}</button>\n            <br />\n            <div class=\"deleteButtons\">\n                {checkIfOneSelected() ? <div class=\"deleteTask\">\n                    <button type=\"button\" name=\"delete\" id=\"delete\" onClick={\n                        () => {\n                            handleDeleteListItem(props.listId, selectedId);\n                            setSelectedId(null);\n                        }}> Delete Task\n                    </button>\n                </div> : null\n                }\n                {(!checkIfOneSelected()) && checkIfContainsCompleted() ? <div class=\"deleteAllButton\">\n                    <button type=\"button\" id=\"deleteAll\" onClick={\n                        () => {\n                            handleDeleteAll();\n                        }}>\n                        Delete All Completed Tasks\n                    </button>\n                </div> : null}\n            </div>\n            <div class=\"taskList\"> {tasks} </div>\n            <br/>\n        </div>\n\n    );\n}\n\nexport default MyList;","import './MyList.css';\nimport './MyLists.css';\nimport React, {useState, useRef} from 'react';\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\nimport firebase from \"firebase/compat\";\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCd9qqxvMpEKpBzwfWcc2tlRFa6ICaLH_s\",\n    authDomain: \"hmc-cs124-fa21-labs.firebaseapp.com\",\n    projectId: \"hmc-cs124-fa21-labs\",\n    storageBucket: \"hmc-cs124-fa21-labs.appspot.com\",\n    messagingSenderId: \"949410042946\",\n    appId: \"1:949410042946:web:0113b139a7e3cd1cc709db\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\n\nconst collectionName = \"waverlywang7-listitems\";\nconst collectionOfLists = db.collection(collectionName);\n\nfunction MyLists(props) {\n    const [listName, setListName] = useState(\"\");\n    const listInput = useRef(null);\n    const [value, loading, error] = useCollection(collectionOfLists);\n\n    let data = [];\n    if (value !== undefined) {\n        data = value.docs.map(doc =>\n            doc.data());\n    }\n\n    function handleAddList() {\n        const newList = {\n            name: listName,\n            id: generateUniqueID()\n        }\n        props.onListAdded(newList.name, newList.id);\n        listInput.current.value = \"\";\n    }\n\n\n    const listOfButtons = data.map(list => (\n        <button\n            name={list.name} id = \"listNameButton\"\n            onClick={(e) => props.setListIdAndName(list.id, list.name)}\n        >{list.name}</button>\n    ))\n\n    return (\n        <div>{loading ? <div>Loading...</div> :\n            <div class=\"myLists\">\n                <h2> MY LISTS </h2>\n\n                <div className=\"inputbar\">\n                    <input type=\"text\" ref={listInput} id=\"myListInput\"\n                           onChange={(e) => setListName(e.target.value)}\n                           placeholder=\"Name your list\"/>\n\n                    <div className=\"addList\">\n                        <button type=\"button\" name=\"add\" id=\"add\" onClick={handleAddList}\n                        >Create New List\n                        </button>\n                    </div>\n\n\n                </div>\n                <div className=\"LoL\"> {listOfButtons} </div>\n            </div>\n        }</div>\n    );\n}\n\nexport default MyLists;","import './App.css';\nimport firebase from \"firebase/compat\";\nimport MyList from './MyList';\nimport MyLists from './MyLists';\nimport React from \"react\";\nimport {useState} from 'react';\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport './ListItem.js'\nimport {useCollection} from \"react-firebase-hooks/firestore\";\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCd9qqxvMpEKpBzwfWcc2tlRFa6ICaLH_s\",\n    authDomain: \"hmc-cs124-fa21-labs.firebaseapp.com\",\n    projectId: \"hmc-cs124-fa21-labs\",\n    storageBucket: \"hmc-cs124-fa21-labs.appspot.com\",\n    messagingSenderId: \"949410042946\",\n    appId: \"1:949410042946:web:0113b139a7e3cd1cc709db\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\n\nconst collectionName = \"waverlywang7-listitems\";\nconst collectionOfLists = db.collection(collectionName);\n\nfunction App(props) {\n    const [selectedListId, setSelectedListId] = useState(null);\n    const [currentListName, setCurrentListName] = useState(null);\n    const [value, loading, error] = useCollection(collectionOfLists); // let MyList and myLists handle\n\n    let data = null;\n    if (value !== undefined) {\n        data = value.docs.map(doc =>\n            doc.data());\n        if (selectedListId !== null && (!data.find(function (element) {\n            return element.id === selectedListId;\n        }))) {\n            setSelectedListId(null);\n        }\n    }\n\n\n    function handleAddList(listName, listId) {\n        const newList = {\n            id: listId,\n            name: listName\n        }\n        collectionOfLists.doc(listId).set(newList);\n\n    }\n\n\n    function handleItemAdded(item, newPriority, listId) {\n        const newItem = {\n            id: generateUniqueID(),\n            priority: newPriority,\n            name: item,\n            creationDate: firebase.database.ServerValue.TIMESTAMP, //changed from 00-00-00\n            completed: false\n        };\n\n        console.log(\"add item\", newItem);\n        collectionOfLists.doc(listId).collection(\"tasks\").doc(newItem.id).set(newItem);\n    }\n\n    function handleListItemFieldChanged(listId, listItemId, field, value) {\n        console.log(\"field\", field);\n        console.log(\"value\", value);\n        collectionOfLists.doc(listId).collection(\"tasks\").doc(listItemId).update({\n            [field]: value,\n        });\n    }\n\n    function handleDeleteList(listId) {\n        collectionOfLists.doc(listId).delete();\n    }\n\n    function setListIdAndName(id, name) {\n        setSelectedListId(id);\n        setCurrentListName(name);\n    }\n\n    function returnHome() {\n        setSelectedListId(null);\n        setCurrentListName(null);\n    }\n\n    return <div>\n        {selectedListId ? <MyList\n                name={currentListName}\n                listId={selectedListId}\n                returnHome={returnHome}\n                onListDeleted={handleDeleteList}\n                onItemAdded={handleItemAdded}\n                onListItemFieldChanged={handleListItemFieldChanged}\n            /> :\n            <MyLists\n                setListIdAndName={setListIdAndName}\n                list={data}\n                onListAdded={handleAddList}\n            />\n        }\n    </div>;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nconst initialData = [];\n\n\nReactDOM.render(\n    <React.StrictMode>\n     <App initialList={initialData}/>\n     </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}