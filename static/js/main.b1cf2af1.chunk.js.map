{"version":3,"sources":["ListItemField.js","ListItem.js","ButtonBar.js","MyList.js","App.js","reportWebVitals.js","index.js"],"names":["ListItemField","props","type","className","field","onChange","event","onListItemFieldChanged","id","target","value","ListItem","classes","checkifSelected","level","priority","selected","push","join","onClick","e","onRowClick","currentTarget","class","checked","completed","name","ButtonBar","isSelected","setShowCompletedItems","MyList","useState","setNewItem","selectedId","setSelectedId","showCompletedItems","isNotEmpty","setIsNotEmpty","input","useRef","pInput","listItemFilterMap","All","Uncompleted","listItem","Completed","buttonList","Object","keys","map","tasks","list","filter","a","checkIfOneSelected","count","i","length","window","onclick","matches","myDropdown","document","getElementById","classList","contains","remove","ref","placeholder","newItem","current","generateUniqueID","onItemAdded","toggle","onSort","toggleSort","onDeleteListItem","checkIfContainsCompleted","onDeleteAll","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","listCollection","firestore","collection","App","query","sortField","sortDirection","order","setOrder","setSortSelected","useCollection","orderBy","loading","data","handleDeleteListItem","listItemId","doc","delete","undefined","docs","item","newPriority","creationDate","database","ServerValue","TIMESTAMP","set","update","filterList","direction","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","initialList"],"mappings":"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","file":"static/js/main.b1cf2af1.chunk.js","sourcesContent":["function ListItemField(props) {\n    return <input type={\"text\"}\n        className={props.field}\n        onChange={\n            event=>props.onListItemFieldChanged(props.id, props.field, event.target.value)\n        }\n        value={props[props.field]} />\n}\nexport default ListItemField;\n","import './ListItem.css';\nimport './MyList.js'\nimport ListItemField from './ListItemField.js'\nimport React, {useState, useRef} from 'react';\nfunction ListItem(props) {\n    const classes = [\"listItem \"];\n    if (props.selected) {\n        classes.push(\"selected\");\n    }\nfunction checkifSelected(level){\n        if(level === props.priority){\n            return true;\n        } else {\n            return false;\n        }\n}\n\n    return (\n        <div className={classes.join(\" \")}\n             key={props.id}\n             id={props.id}\n             onClick={(e) => {\n                 props.onRowClick(e.currentTarget.id);\n             }}\n        >\n            <div class= \"container2\">\n                <input\n                    type=\"checkbox\"\n                    onChange={(e) => {\n                        props.onListItemFieldChanged(props.id, \"completed\", e.target.checked);\n                    }\n                    }\n                    id={props.id}\n                    checked={props.completed}\n                />\n            <ListItemField field=\"name\" {...props}/>\n                <div className=\"itemDropdown\">\n                    <select name=\"Priority\"\n                            id=\"priorityInput\"\n                            onChange={(e) => {\n\n                                props.onListItemFieldChanged(props.id, \"priority\", e.target.value);\n                            }}>\n                        <option value=\"c\" id =\"low\" selected={checkifSelected(\"c\")}>low</option>\n\n                        <option value=\"b\" id=\"medium\" selected={checkifSelected(\"b\")}>medium</option>\n\n                        <option value=\"a\" id=\"high\" selected={checkifSelected(\"a\")}>high</option>\n                    </select>\n\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default ListItem;","import \"./ButtonBar.css\"\nfunction ButtonBar(props){\n    return(\n    <button\n        type=\"button\"\n        className={props.isSelected ? \"selected1\" : \"unselected1\"}\n        onClick={() => props.setShowCompletedItems(props.name)}\n    >\n        <span className=\"visually-hidden\"></span>\n        <span>{ props.name }</span>\n    </button>\n    )\n}\n\nexport default ButtonBar;","import ListItem from \"./ListItem.js\";\nimport './MyList.css';\nimport React, {useState, useRef} from 'react';\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport ButtonBar from \"./ButtonBar.js\";\n\n\nfunction MyList(props) {\n    const [newItem, setNewItem] = useState({name: \"\", id: 0, completed: false});\n    const [selectedId, setSelectedId] = useState(null);\n    const [showCompletedItems, setShowCompletedItems] = useState(\"All\");\n    const [isNotEmpty, setIsNotEmpty] = useState(false);\n\n\n    const input = useRef(null);\n    const pInput = useRef(null);\n\n\n    function handleAdd() {\n        const newItem = {\n            name: input.current.value,\n            id: generateUniqueID(),\n            completed: false,\n            priority: pInput.current.value\n        }\n        setNewItem(newItem);\n        props.onItemAdded(newItem.name, newItem.priority);\n        input.current.value = \"\";\n        setIsNotEmpty(false);\n    }\n\n    const listItemFilterMap = {\n        All: () => true,\n        Uncompleted: listItem => !listItem.completed,\n        Completed: listItem => listItem.completed\n    }\n\n    const listItemFilterNames = Object.keys(listItemFilterMap);\n    const buttonList = listItemFilterNames.map(name => (\n        <ButtonBar\n            name={name}\n            aria-pressed={props.isSelected}\n            isSelected={name === showCompletedItems}\n            setShowCompletedItems={setShowCompletedItems}/>\n    ))\n\n\n    const filteredList = props.list.filter(listItemFilterMap[showCompletedItems]);\n    const tasks = filteredList\n        .map(a =>\n            <ListItem\n                onRowClick={(id) =>\n                    setSelectedId(id)}\n                onListItemFieldChanged={props.onListItemFieldChanged}\n                selected={a.id === selectedId}\n\n                key={a.id}\n                {...a} />,\n        );\n\n    const checkInput = (value) => {\n        return (value !== \"\");\n    }\n\n    function checkIfContainsCompleted() {\n        for (let i = 0; i < props.list.length; i++) {\n            if (props.list[i].completed === true) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function checkIfOneSelected() {\n        let count = 0;\n        for (let i = 0; i < props.list.length; i++) {\n            if (props.list[i].completed === true) {\n                count++;\n            }\n        }\n        if (count === 1) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function toggleDropdown() {\n        document.getElementById(\"sortButton1\").classList.toggle(\"hideButton\");\n        document.getElementById(\"sortButton2\").classList.toggle(\"hideButton\");\n        document.getElementById(\"sortButton3\").classList.toggle(\"hideButton\");\n    }\n\n    function toggleOrderDropdown() {\n        document.getElementById(\"ascending\").classList.toggle(\"hideButton\");\n        document.getElementById(\"descending\").classList.toggle(\"hideButton\");\n    }\n\n    //Close the dropdown if the user clicks outside of it\n    window.onclick = function (e) {\n        if (!e.target.matches('.sortDropdown')) {\n            var myDropdown = document.getElementById(\"myDropdown\");\n            if (myDropdown.classList.contains('show')) {\n                myDropdown.classList.remove('show');\n            }\n        }\n    }\n\n    // function addOnEnter() {\n    // let input2 = document.getElementById(\"myInput\");\n    // console.log(\"i am here\");\n    // input2.addEventListener(\"keyup\", function (event) {\n    //     if (event.keyCode === 13) {\n    //         event.preventDefault();\n    //         document.getElementById(\"add\").click();\n    //     }\n    // });\n    // }\n\n    return (\n\n        <div class=\"myList\">\n\n            <h2> MY LIST </h2>\n            {buttonList}\n            <div class=\"inputbar\">\n                <input type=\"text\" ref={input} id=\"myInput\"\n                       onChange={(e) => setIsNotEmpty(checkInput(e.target.value))}\n                       placeholder=\"I need to...\"/>\n\n                {isNotEmpty && <div id=\"prioritycontainer\">\n                    <text id=\"priorityText\"> Priority</text>\n                    <div className=\"dropdown\">\n\n                        <select name=\"Priority\" ref={pInput} id=\"priorityInput\">\n                            <option value=\"c\">low</option>\n                            <option value=\"b\">medium</option>\n                            <option value=\"a\">high</option>\n                        </select>\n                    </div>\n                </div>\n                }\n\n\n                {isNotEmpty && <div class=\"addTask\">\n                    <button type=\"button\" name=\"add\" id=\"add\" onClick={handleAdd}\n                    >Add Task</button>\n                </div>\n                }\n            </div>\n            <div className=\"dropdown\">\n                <button onClick={toggleDropdown} className=\"sortDropdown\">Sort\n                    <i class=\"fa fa-caret-down\"></i>\n                </button>\n                <div id=\"myDropdown\" className=\"dropdown-content\">\n                    <option type=\"button\" name=\"sortbyname\" id=\"sortButton1\" onClick={() => {\n                        props.onSort(\"name\", \"asc\");\n                    }}> Sort by Name\n                    </option>\n\n                    <option type=\"button\" name=\"sortbycreationdate\" id=\"sortButton2\" onClick={() => {\n                        props.onSort(\"creationDate\", \"asc\");\n\n                    }}> Sort by Creation Date\n                    </option>\n                    <option type=\"button\" name=\"priority\" id=\"sortButton3\" onClick={() => {\n                        props.onSort(\"priority\", \"asc\");\n                    }}> Sort by Priority\n                    </option>\n                </div>\n\n\n                <button onClick={toggleOrderDropdown} className=\"sortDropdown\">Order\n                    <i className=\"fa fa-caret-down\"></i>\n                </button>\n            <div id=\"togglesort\" className=\"dropdown-content\">\n                <option type=\"button\" name=\"ascending\" id=\"ascending\" onClick={() => {\n                    props.toggleSort(\"asc\");\n                }}> Ascending\n                </option>\n\n                <option type=\"button\" name=\"descending\" id=\"descending\" onClick={() => {\n                    props.toggleSort(\"desc\");\n\n                }}> Descending\n                </option>\n\n            </div>\n            </div>\n            <div class=\"deleteButtons\">\n                {checkIfOneSelected() ? <div class=\"deleteTask\">\n                    <button type=\"button\" name=\"delete\" id=\"delete\" onClick={\n                        () => {\n                            props.onDeleteListItem(selectedId);\n                            setSelectedId(null);\n                        }}>Delete Task\n                    </button>\n                </div> : null\n                }\n                {(!checkIfOneSelected()) && checkIfContainsCompleted() ? <div class=\"deleteAllButton\">\n                    <button type=\"button\" id=\"deleteAll\" onClick={\n                        () => {\n                            props.onDeleteAll(selectedId);\n                        }}>\n                        Delete All Completed Tasks\n                    </button>\n                </div> : null}\n            </div>\n            <div class=\"taskList\"> {tasks} </div>\n            <br/>\n        </div>\n\n    );\n}\n\nexport default MyList;","import './App.css';\nimport firebase from \"firebase/compat\";\nimport MyList from './MyList';\nimport React from \"react\";\nimport { useState } from 'react';\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport './ListItem.js'\nimport {useCollection} from \"react-firebase-hooks/firestore\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCd9qqxvMpEKpBzwfWcc2tlRFa6ICaLH_s\",\n    authDomain: \"hmc-cs124-fa21-labs.firebaseapp.com\",\n    projectId: \"hmc-cs124-fa21-labs\",\n    storageBucket: \"hmc-cs124-fa21-labs.appspot.com\",\n    messagingSenderId: \"949410042946\",\n    appId: \"1:949410042946:web:0113b139a7e3cd1cc709db\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\nconst collectionName = \"waverlywang7-listitems\";\nconst listCollection = db.collection(collectionName);\nfunction App(props) {\n    const query = listCollection;\n    // create a state\n    const [order, setOrder] = useState({sortField:\"name\",sortDirection:\"asc\"});\n    //const query = listCollection;\n    const[sortSelected, setSortSelected] = useState(false);\n    const [value, loading, error] = useCollection(query.orderBy(order.sortField, order.sortDirection));\n\n    let data = null;\n    if (value !== undefined) {\n        data = value.docs.map(doc =>\n            doc.data());\n    }\n\n    function handleDeleteListItem(listItemId){\n        listCollection.doc(listItemId).delete();\n    }\n\n    function handleItemAdded(item, newPriority) {\n        const newItem = {\n                id: generateUniqueID(),\n                priority: newPriority,\n                name: item,\n                creationDate: firebase.database.ServerValue.TIMESTAMP, //changed from 00-00-00\n                completed: false\n            };\n            listCollection.doc(newItem.id).set(newItem);\n    }\n\n    function handleDeleteAll() {\n        let filterList = data.filter(listItem => listItem.completed);\n        for (let i = 0; i < filterList.length; i ++) {\n            handleDeleteListItem(filterList[i].id);\n        }\n    }\n\n    function handleListItemFieldChanged(listItemId, field, value) {\n        listCollection.doc(listItemId).update({\n            [field]: value,\n        });\n    }\n\n    function handleSort(name, direction) {\n        setOrder({sortField: name, sortDirection: direction});\n        setSortSelected(true);\n    }\n\n    function toggleSort(direction) {\n        console.log(order.name);\n        setOrder({sortField: order.sortField, sortDirection: direction});\n    }\n\n    return <div>\n        {loading ? <div>Loading...</div> :\n        <MyList list={data}\n                onItemAdded={handleItemAdded}\n                onDeleteListItem={handleDeleteListItem}\n                onListItemFieldChanged={handleListItemFieldChanged}\n                onDeleteAll={handleDeleteAll}\n                onSort={handleSort}\n                toggleSort={toggleSort}\n        />}\n        </div>;\n    };\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nconst initialData = [];\n\n\nReactDOM.render(\n    <React.StrictMode>\n     <App initialList={initialData}/>\n     </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}